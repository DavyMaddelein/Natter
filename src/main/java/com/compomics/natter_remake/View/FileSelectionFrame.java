/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.compomics.natter_remake.View;

import com.compomics.natter_remake.controllers.DataExtractor;
import com.compomics.natter_remake.controllers.FileDAO;
import com.compomics.natter_remake.model.RovFile;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.zip.ZipEntry;
import java.util.zip.ZipException;
import java.util.zip.ZipFile;
import javax.swing.JOptionPane;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.stream.XMLStreamException;
import org.apache.log4j.Logger;

/**
 *
 * @author Davy
 */
public class FileSelectionFrame extends javax.swing.JFrame {

    private static final Logger logger = Logger.getLogger(FileSelectionFrame.class);

    /**
     * Creates new form FileSelectionFrame
     */
    public FileSelectionFrame() throws ZipException, IOException {
        initComponents();
        new FileSelectionFrame().setVisible(true);


    }

    private void buttonpress() throws ParserConfigurationException, XMLStreamException {
        try {
            RovFile rovFileToExtract = new RovFile("");
            if (FileDAO.checkIfFileIsZipped(rovFileToExtract)) {
                ZipFile selectedDistillerFile = new ZipFile(rovFileToExtract);
                ZipEntry zippedQuantXML = selectedDistillerFile.getEntry("bb8");
                try{
                    DataExtractor.parseRovFile(new BufferedReader(new InputStreamReader(selectedDistillerFile.getInputStream(zippedQuantXML))));
                } catch(NullPointerException npe){
                    JOptionPane.showMessageDialog(this, "the Distiller file did not contain quantitation data");
                }
            }
        }
        catch (ZipException ex) {
            logger.error(ex);
            //fail silently?
        }
        catch (IOException ex) {
            logger.error(ex);
            JOptionPane.showMessageDialog(this, "");
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
